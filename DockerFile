# Use an official Python runtime as a parent image
FROM python:3.13-slim-bookworm

# Set environment variables
# Disable .pyc file generation and enable unbuffered logging
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1

# Set work directory
WORKDIR /app # All subsequent commands run from /app

# Create a non-root user and group for the application
RUN groupadd -r appgroup && useradd --no-log-init -r -g appgroup -d /app appuser

# Install system dependencies
# - apt-utils: for cleaner apt logs
# - curl: useful for healthchecks
# - build-essential: if any Python packages need to compile C extensions
# - libpq-dev: if psycopg2 (PostgreSQL adapter) needs to be built from source
# - GDAL and related libraries for GeoDjango
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    apt-utils \
    curl \
    build-essential \
    libpq-dev && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Create app directories and set ownership
# STATIC_ROOT and MEDIA_ROOT will typically be subdirectories of /app
RUN mkdir -p /app/staticfiles /app/mediafiles && \
    chown -R appuser:appgroup /app && \
    chmod -R 755 /app

# Install dependencies
# Copy requirements first to leverage Docker cache, set ownership
COPY --chown=appuser:appgroup requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy project
# Copy the rest of the application code, set ownership
COPY --chown=appuser:appgroup . .

# Collect static files. This runs as root during the build, which is fine.
# Ensure STATIC_ROOT is defined in your Django settings (e.g., STATIC_ROOT = BASE_DIR / "staticfiles")
RUN python manage.py collectstatic --noinput

# Switch to the non-root user for running the application
USER appuser

# Expose port 8000
CMD ["python", "-m", "gunicorn", "TinderCloneProject.wsgi:application", "--bind", "0.0.0.0:8000"]