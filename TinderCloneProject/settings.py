"""
Django settings for TinderCloneProject project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
import environ # Import django-environ
from datetime import timedelta
import dj_database_url # For database URL parsing

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Initialize django-environ
env = environ.Env(
    # set casting, default value
    DEBUG=(bool, False),
    ALLOWED_HOSTS=(list, []),
    CSRF_TRUSTED_ORIGINS=(list, []),
)

# Reading .env file if it exists (for local development)
environ.Env.read_env(os.path.join(BASE_DIR, '.env'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY', default='your-default-secret-key-for-dev-only-change-me')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env('DEBUG')

ALLOWED_HOSTS = env('ALLOWED_HOSTS')
CSRF_TRUSTED_ORIGINS = env('CSRF_TRUSTED_ORIGINS') # For HTTPS

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    # Django Allauth - must come before django.contrib.admin if overriding admin templates
    'allauth',
    'allauth.account',
    'allauth.socialaccount', # For social login (Google, Facebook, etc.)
    # Providers for allauth (add as needed)
    'allauth.socialaccount.providers.google',
    # 'allauth.socialaccount.providers.facebook',

    # Third party apps
    'rest_framework',
    'rest_framework_simplejwt',
    'django_filters', # For filtering
    'drf_yasg', # For Swagger/OpenAPI
    'silk', # For profiling
    'corsheaders', # For CORS
    'storages', # For S3/MinIO
    'oauth2_provider',
    'social_django',
    # 'rest_framework_social_oauth2', # You might not need this if using allauth for social and simplejwt for API

    # Local apps
    'apps.accounts.apps.AccountsConfig',
    'apps.profiles.apps.ProfilesConfig',
    'apps.matches.apps.MatchesConfig',
    'apps.notifications.apps.NotificationsConfig',
    'apps.actions.apps.ActionsConfig',
    ]


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'corsheaders.middleware.CorsMiddleware', # CORS middleware - place high, but after SecurityMiddleware
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'allauth.account.middleware.AccountMiddleware', # Add allauth AccountMiddleware
    'silk.middleware.SilkyMiddleware', # Silk middleware
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]


ROOT_URLCONF = 'TinderCloneProject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'social_django.context_processors.backends',
                'social_django.context_processors.login_redirect',
            ],
        },
    },
]

WSGI_APPLICATION = 'TinderCloneProject.wsgi.application'
ASGI_APPLICATION = 'TinderCloneProject.asgi.application' # For Django Channels


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': dj_database_url.parse(os.environ.get('DATABASE_URL'))
}

# Ensure standard PostgreSQL backend is used.
DATABASES['default']['ENGINE'] = 'django.db.backends.postgresql'

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / 'staticfiles' # For collectstatic in production
STATICFILES_DIRS = [
    BASE_DIR / "static", # For project-level static files during development
]

MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'mediafiles' # For user-uploaded files during local development

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-STATIC_ROOT 

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Django REST Framework Settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        # 'rest_framework.authentication.SessionAuthentication', # If you also use Django admin/templates
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticatedOrReadOnly',
    ],
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle'
    ],
    'DEFAULT_THROTTLE_RATES': {
        'anon': env('DRF_THROTTLE_RATE_ANON', default='100/day'),
        'user': env('DRF_THROTTLE_RATE_USER', default='1000/day')
    },
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': env('DRF_PAGE_SIZE', cast=int, default=10),
}

# Simple JWT Settings
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=env('JWT_ACCESS_TOKEN_LIFETIME_MINUTES', cast=int, default=60)), # e.g., 1 hour
    'REFRESH_TOKEN_LIFETIME': timedelta(days=env('JWT_REFRESH_TOKEN_LIFETIME_DAYS', cast=int, default=7)),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': True,

    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY, # Uses the main SECRET_KEY
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,
    'JWK_URL': None,
    'LEEWAY': 0,

    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule',

    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    'TOKEN_USER_CLASS': 'rest_framework_simplejwt.models.TokenUser',

    'JTI_CLAIM': 'jti',

    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=env('JWT_SLIDING_TOKEN_LIFETIME_MINUTES', cast=int, default=5)),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=env('JWT_SLIDING_TOKEN_REFRESH_LIFETIME_DAYS', cast=int, default=1)),
}

# GDAL/GEOS and OSGeo4W specific configurations are no longer needed and have been removed.
# - GDAL_LIBRARY_PATH and GEOS_LIBRARY_PATH are removed.
# - Any OSGeo4W environment setup blocks (for PATH, GDAL_DATA, PROJ_LIB, os.add_dll_directory) are removed.

AUTH_USER_MODEL = 'accounts.User'

CACHES = {
        "default": {
            "BACKEND": "django_redis.cache.RedisCache",
            "LOCATION": "redis://127.0.0.1:6379/0", # Your Redis connection string
            "OPTIONS": {
                "CLIENT_CLASS": "django_redis.client.DefaultClient",
                # "PASSWORD": "your_redis_password", # If Redis requires authentication
            }
        }
    }

# Celery Configuration (using Redis as broker and backend)
CELERY_BROKER_URL = env('CELERY_BROKER_URL', default=env('REDIS_URL', default="redis://127.0.0.1:6379/0")) # /0 for Celery
CELERY_RESULT_BACKEND = env('CELERY_RESULT_BACKEND', default=env('REDIS_URL', default="redis://127.0.0.1:6379/0"))
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = TIME_ZONE # Use Django's timezone
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler' # If you use scheduled tasks

# Django Channels
CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [env('REDIS_URL', default="redis://127.0.0.1:6379/2")], # /2 for Channels
        },
    },
}

# CORS Settings
CORS_ALLOW_ALL_ORIGINS = DEBUG # For development, allow all. Restrict in production.
CORS_ALLOWED_ORIGINS = env.list('CORS_ALLOWED_ORIGINS', default=[]) # e.g., ['http://localhost:3000', 'https://yourfrontend.com']
# CORS_ALLOW_CREDENTIALS = True # If you need to send cookies/auth headers

# Silk Profiler Settings (optional, can be more specific)
SILKY_AUTHENTICATION = True  # Set to True if login is required to view Silk UI
SILKY_AUTHORISATION = True  # Set to True if user needs to be staff to view Silk UI
# SILKY_PERMISSIONS = lambda user: user.is_staff # Example permission


USE_S3 = os.environ.get('USE_S3') == "True"
# Cloud Storage (MinIO/S3) - Configure one of these if not using local media
if USE_S3:
    AWS_ACCESS_KEY_ID = os.environ.get('MINIO_ACCESS_KEY')
    AWS_SECRET_ACCESS_KEY = os.environ.get('MINIO_SECRET_KEY')
    AWS_STORAGE_BUCKET_NAME = os.environ.get('MINIO_BUCKET_NAME')

    # Used by docker
    AWS_S3_ENDPOINT_URL = f"http://{os.environ.get('MINIO_HOST', '9000')}:9000"
    # Used by browser
    AWS_S3_CUSTOM_DOMAIN = f"localhost:{os.environ.get('MINIO_PORT', '9000')}"
    AWS_S3_OBJECT_PARAMETERS = {
        'CacheControl': 'max-age=86400',
    }

    AWS_DEFAULT_ACL = None
    AWS_S3_FILE_OVERWRITE = False
    AWS_S3_USE_SSL = False

    DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
    MEDIA_URL = '/media/'
    MEDIA_HOST = f"http://{AWS_S3_CUSTOM_DOMAIN}/{AWS_STORAGE_BUCKET_NAME}"

else:
    MEDIA_ROOT = BASE_DIR / "media"
    MEDIA_URL = "/media/"

# Email Configuration (for development - prints to console)
if DEBUG:
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
else:
    # Configure your actual email backend for production
    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
    EMAIL_HOST = 'your_smtp_server'
    EMAIL_PORT = 587
    EMAIL_USE_TLS = True
    EMAIL_HOST_USER = 'your_email_address'
    EMAIL_HOST_PASSWORD = 'your_email_password'
    DEFAULT_FROM_EMAIL = 'webmaster@localhost' # Or your actual from email

AUTHENTICATION_BACKENDS = (
    'social_core.backends.google.GoogleOAuth2',
    'django.contrib.auth.backends.ModelBackend', # Keep Django's default
)

SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = env('GOOGLE_OAUTH2_CLIENT_ID', default='')
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = env('GOOGLE_OAUTH2_CLIENT_SECRET', default='')
SOCIAL_AUTH_GOOGLE_OAUTH2_SCOPE = [
    'https://www.googleapis.com/auth/userinfo.email',
    'https://www.googleapis.com/auth/userinfo.profile',
]

# Django Allauth specific settings (optional, but often needed)
# ACCOUNT_EMAIL_REQUIRED = True # Deprecated
# ACCOUNT_AUTHENTICATION_METHOD = 'email' # Deprecated

# New settings to replace deprecated ones:
ACCOUNT_AUTHENTICATION_METHOD = 'username_email' # Allow login with username or email
ACCOUNT_LOGIN_METHODS = {} # Not needed if ACCOUNT_AUTHENTICATION_METHOD is set comprehensively

ACCOUNT_SIGNUP_FIELDS = ['username', 'email'] # Define fields for the signup form. Password is implicitly handled.
# Allauth handles password confirmation automatically if using its forms.

ACCOUNT_USER_MODEL_USERNAME_FIELD = 'username' # Explicitly tell allauth which field is the username
ACCOUNT_USERNAME_REQUIRED = True        # Consistent with 'username' in ACCOUNT_SIGNUP_FIELDS


ACCOUNT_EMAIL_VERIFICATION = 'optional' # Or 'mandatory' or 'none'
LOGIN_REDIRECT_URL = 'profiles:profile-display' # Redirect to your custom profile display page
ACCOUNT_LOGOUT_REDIRECT_URL = 'home' # Default redirect after logout


LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {"class": "logging.StreamHandler"},
    },
    "root": {
        "handlers": ["console"],
        "level": "INFO" if not DEBUG else "DEBUG",
    },
}
