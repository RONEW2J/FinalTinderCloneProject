services:
  web:
    build: .
    command: > # Temporarily add --workers 1 and --log-level debug
      bash -c "python manage.py collectstatic --noinput &&
               gunicorn TinderCloneProject.wsgi:application --bind 0.0.0.0:8000 --workers 1 --log-level debug"
    volumes:
      - .:/app
      - static_volume:/app/static
    ports:
      - "8005:8000"  
    depends_on:
      db:
        condition: service_healthy # Wait for db to be healthy
      minio:
        condition: service_healthy # Wait for minio to be healthy
    env_file:
      - .env.prod

  db:
    image: postgres:15
    container_name: postgres_db
    restart: always
    environment:
      POSTGRES_DB: PinderDB
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: db_pass25
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d PinderDB"] # Assumes default user/db from env
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - postgres_data:/var/lib/postgresql/data

  minio:
    image: minio/minio
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY}
    env_file:
      - .env.prod
    command: server --console-address ":9001" /data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  nginx:
    image: nginx:stable-alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - static_volume:/app/static
    depends_on:
      - web
  
  createbuckets:
    image: minio/mc
    depends_on:
      minio:
        condition: service_healthy # Wait for minio to be healthy
    env_file:
      - .env.prod
    entrypoint: >
      /bin/sh -c "
      echo 'MinIO is healthy, configuring buckets...';
      /usr/bin/mc config host add myminio http://minio:9000 ${MINIO_ACCESS_KEY} ${MINIO_SECRET_KEY};
      /usr/bin/mc mb --ignore-existing myminio/${MINIO_BUCKET_NAME};
      /usr/bin/mc anonymous set download myminio/${MINIO_BUCKET_NAME};
      /usr/bin/mc policy set public myminio/${MINIO_BUCKET_NAME};
      exit 0;
      "

  redis:
    image: redis:7-alpine
    container_name: redis_cache
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
  static_volume:
  minio_data:
  redis_data:
